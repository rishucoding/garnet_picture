1. The InputUnit models the input port of a router. The input unit is connected to inNetLink where
   it consumes the flit; outCreditLink where the credits are passed for incoming flits. The flits
   are stored in VC.


2.  PortDirection : North, West, South, East, Local

3.  Constructor: Every port has a id which denotes the port number.
    Two dummy variable:
        m_num_buffer_reads
        m_num_buffer_writes
        These are of size #VNETs, they are initialized to zero.
    creditQueue // stores the credit count for incoming flits
    a total of (m_num_vcs) VC are instantiated.

    -----
    NOTE: VirtualChannel is itself a flit buffer. Check VirtualChannel.txt for more details
    -----

4.  Method: wakeup()

    /*
    * The InputUnit wakeup function reads the input flit from its input link.
    * Each flit arrives with an input VC.
    * For HEAD/HEAD_TAIL flits, performs route computation,
    * and updates route in the input VC.
    * The flit is buffered for (m_latency - 1) cycles in the input VC
    * and marked as valid for SwitchAllocation starting that cycle.
    *
    */

    a) create a dummy flit
    b) check if m_in_link is ready
    c) get the flit by consuming the m_in_link
    d) get the vc of flit.
    e) increment_hops now, as flit has traversed the link
    f) if the flit is a head or head_tail :
        > sanity check that corresponding VC is IDLE_.
        > change the state of VC to ACTIVE_
        > find the output port by calling router's 'route_compute' method.
        > update output port in VC. All flits in this packet will use this output port. The output
          port field in the flit is updated after it wins SA.
          This is done by calling grant_outport(vc, outport) which simply sets the output port of VC.

       else if the flit is a body or tail flit: then sanity check that VC is ACTIVE_

     g) insert the flit in VC (BW - first stage of router pipeline happened)
     h) increment count of m_num_buffer_writes[vnet] and m_num_buffer_reads[vnet]
     i) flit moves to SA_ stage.
     j) TODO: Add details about pipe_stages. // seems like

5.  Method: increment_credit(int in_vc, bool free_signal, Cycles curTime){}
    // When the flit is consumed from the VC and goes to SA, a space for flit is available at
       the VC buffer. Thus, increment the credits in creditQueue. The VC is consuming flits, so
       it needs to maintain a creditQueue, have a credit link with the upstream router/NI to tell
       about the space available in VC. For every flit that moves via Network link, a credit signal
       is sent back to tell about available space.


