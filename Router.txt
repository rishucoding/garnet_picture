1.  The Router class houses one routing unit, switch allocator, crossbar switch, and for each one port
    input and output unit.

	Router stages are performend by the router in order.

	BW -> RC -> VA -> SA -> BR -> ST -> LT

	1. BW: the input unit buffers the incoming flits in its VC.
	2. RC: the routing unit computes the output port for the buffered flits
	3. VC allocation: the VC  allocator arbitrates the input ports by selecting a VC from each input
	port, in a round robin manner.( so for each input port, selection of VC -> a winning VC is chosen)
	4. SA : the switch allocator arbitrates the output ports by selecting one input VC as the winner
	for each output port, in a round robin manner.
	5. BR: the flits that won SA are pulled their respective input units.
	6. ST: flits that won SA traverse the crossbar switch
	7. LT: flits traverse links from the output unit to their target routers.

	-----
	NOTE: By default: all stages except link traversal are performed in one cycle. Link traversal occurs in
	next cycle.
	-----

	Route Compute is only done for HEAD / HEAD_TAIL flits, update route in VC.

	Once the input unit VC is full, we mark VC valid for VC allocation.

	SwitchAllocator does both VC arbitration and input port selection.
	SA-i / SA-I : loops through all input VCs at every input port and selects one in round robin manner.

2.	constructor : set values of m_latency, m_virtual_networks, m_vc_per_vnet, m_num_vcs, m_routing_unit,
    m_sw_alloc, m_switch, m_input_unit, m_output_unit

3.  wakeup():
    This method wakes up all the input units, output units, SA and crossbar switch
    The router's wakeup function is called whenever any of its modules (InputUnit, OutputUnit,
    SwitchAllocator, CrossbarSwitch) have a ready flit/credit to act upon this cycle.

    a) for (int inport = 0; inport < m_input_unit.size(); inport++)
       loop through all input units and call their wakeup()

    b) for (int outport = 0; outport < m_output_unit.size(); outport++)
       loop through all output units and call their wakeup()

    c) call wakeup() of switch allocation and switch traversal unit.

4.  Method: addInPort
    a) create a new InputUnit, establish the incoming network link and outgoing credit
    link to InputUnit
    A dummy variable port_num is defined which is size of vector m_input_unit.
    Routing unit's addInDirection is called.

5.  Method: addOutPort
    a) Similar to (4), a new OutputUnit is created

6.  Method: getOutportDirection returns the direction of an output port given the port number.

7.  Similar to (6), returns the direction of an input port.

8.  Method: route_compute
    This method works on InputUnit. The route for the flits sitting at input side needs to be
    computed. This method returns the id of outport.

9.  Method: grant_switch
    For a InputUnit / input port and a given flit, the flit is passed to switch for traversal.
